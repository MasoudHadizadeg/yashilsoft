<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="CodeGeneratorGreen.Classes" #>
<#@ import namespace="CodeGeneratorGreen.Extentions" #>
<#@ import namespace="CodeGeneratorGreen.Models" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
			<#
			var table = SqlToCsharpHelper.table;
			string angularFriendlyName = table.Name.ToAngularFrendlyName();
			string firstCharacterLower = table.Name.FirstCharacterToLower();
			string detailComponentName=table.Name +"DetailComponent";
			if(table.GenerateTabForDescColumn){
				detailComponentName=table.Name +"DetailTabBasedComponent"; 
			}			
			#>
		import {Selectable} from '../../../shared/base/classes/selectable';
		import {BaseList} from '../../../shared/base/classes/base-list';
		import {Component, Input, OnInit, ViewChild} from '@angular/core';
		import {<#=table.Name #>DetailComponent} from './<#=angularFriendlyName #>-detail.component';
		<#
		if(table.GenerateTabForDescColumn){
		#>
		import {<#=table.Name #>DetailTabBasedComponent} from './<#=angularFriendlyName #>-detail-tab-based.component';
		<#} #>	
		

		@Component({
		  selector: 'app-<#=angularFriendlyName #>-list',
		  templateUrl: './<#=angularFriendlyName #>-list.component.html'
		})
		export class <#=table.Name #>ListComponent extends Selectable  implements OnInit {
		  @ViewChild('listForm', {static: true}) listForm: BaseList;
		  loadAfterSetFilter:boolean;
		  selectedItemId: number;
		  columns: any[] = [];
		  entityName = '<#=firstCharacterLower #>';
		  detailComponent =<#=detailComponentName #>;
		 <#foreach (var col in table.Columns.Where(x => x.IsForeignKey && !ApplicationInfo.Instance.skipedColumnInAngularList.Contains(x.Name)))
			{
			var propName = col.Name.FirstCharacterToLower();#>
			_<#=propName#>:number;
			@Input()
			set <#=propName#>(val){
				if(val!==this._<#=propName#>){
					this._<#=propName#>=val;
				}
			}
			get <#=propName#>(): number {
					return this._<#=propName#>;
				}
			<#}#>
		  private baseListUrl = '<#=firstCharacterLower #>/GetByCustomFilterForList';
		  constructor() {
			super();
			<#
			// Iterate all columns

			
			foreach (var col in table.Columns.Where(x => !ApplicationInfo.Instance.skipedColumnInAngularList.Contains(x.Name)))
			{
				if(col.Name=="Code" || col.Name=="AccessLevelId")
				{
					continue;
				}
				var colCaption = col.Name.FirstCharacterToLower();

				// If we can't map it, skip it
				string colNamef;
				if (col.IsForeignKey)
					colNamef = colCaption.Replace("Id", "") + "Title";
				else
					colNamef = col.Name.FirstCharacterToLower();
				string propertyType = SqlToCsharpHelper.GetNetDataType(col.ColType);
				if((propertyType == "string" &&  col.MaxLength=="-1")){
							continue;
					}
				colCaption = string.IsNullOrEmpty(col.ColDesc) ? col.Name : col.ColDesc.Replace("*", "");
				#>
				this.columns.push({ 
					caption: '<#=colCaption #>',
					dataField: '<#=colNamef #>'
					});
			<#
			} #>
				
				}
			ngOnInit(): void {
					if(this.bindCustomDataSources()){
						this.loadAfterSetFilter=true;
					}
				}

	private bindCustomDataSources() {
		<#
		var cols=table.Columns.Where(x => x.IsForeignKey && !ApplicationInfo.Instance.skipedColumnInAngularList.Contains(x.Name));
		var colsIfCondition = String.Join(" || ", cols.Select(x=> "this."+ x.Name.FirstCharacterToLower()).ToArray());
		#>
		if (this.listForm) {
			let customListUrl = `${this.baseListUrl}`;
			<#foreach (var col in cols)
			{#>
				if(this.<#=col.Name.FirstCharacterToLower()#>){
					customListUrl = += `<#=col.Name.FirstCharacterToLower()#>=${this.<#=col.Name.FirstCharacterToLower()#>}&`;
				}
			<#}#>
			this.listForm.customListUrl = customListUrl;
            this.listForm.refreshList();
		}
		let res=false;
		if(<#=colsIfCondition#>){
			res=true;
		}
		return res;
    }
    afterInitialDetailComponent(componentInstance: any) {
        const comp = (<<#=detailComponentName#>>componentInstance);
		<#foreach (var col in cols)
		{	#>		
			if(this.<#=col.Name.FirstCharacterToLower()#>){
				comp.<#=col.Name.FirstCharacterToLower()#> = this.<#=col.Name.FirstCharacterToLower()#>;
			}
		<#}#>        
    }
}
