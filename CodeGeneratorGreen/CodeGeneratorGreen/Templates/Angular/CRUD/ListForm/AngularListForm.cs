// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGeneratorGreen.Templates.Angular.CRUD.ListForm
{
    using CodeGeneratorGreen.Classes;
    using CodeGeneratorGreen.Extentions;
    using CodeGeneratorGreen.Models;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class AngularListForm : AngularListFormBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\t\t\t");
            
            #line 9 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"

			var table = SqlToCsharpHelper.table;
			string angularFriendlyName = table.Name.ToAngularFrendlyName();
			string firstCharacterLower = table.Name.FirstCharacterToLower();
			string detailComponentName=table.Name +"DetailComponent";
			if(table.GenerateTabForDescColumn){
				detailComponentName=table.Name +"DetailTabBasedComponent"; 
			}			
			
            
            #line default
            #line hidden
            this.Write("\t\timport {Selectable} from \'../../../shared/base/classes/selectable\';\r\n\t\timport {" +
                    "BaseList} from \'../../../shared/base/classes/base-list\';\r\n\t\timport {Component, I" +
                    "nput, OnInit, ViewChild} from \'@angular/core\';\r\n\t\timport {");
            
            #line 21 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("DetailComponent} from \'./");
            
            #line 21 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(angularFriendlyName));
            
            #line default
            #line hidden
            this.Write("-detail.component\';\r\n\t\t");
            
            #line 22 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"

		if(table.GenerateTabForDescColumn){
		
            
            #line default
            #line hidden
            this.Write("\t\timport {");
            
            #line 25 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("DetailTabBasedComponent} from \'./");
            
            #line 25 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(angularFriendlyName));
            
            #line default
            #line hidden
            this.Write("-detail-tab-based.component\';\r\n\t\t");
            
            #line 26 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
} 
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\r\n\r\n\t\t@Component({\r\n\t\t  selector: \'app-");
            
            #line 30 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(angularFriendlyName));
            
            #line default
            #line hidden
            this.Write("-list\',\r\n\t\t  templateUrl: \'./");
            
            #line 31 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(angularFriendlyName));
            
            #line default
            #line hidden
            this.Write("-list.component.html\'\r\n\t\t})\r\n\t\texport class ");
            
            #line 33 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("ListComponent extends Selectable  implements OnInit {\r\n\t\t  @ViewChild(\'listForm\'," +
                    " {static: true}) listForm: BaseList;\r\n\t\t  loadAfterSetFilter:boolean;\r\n\t\t  selec" +
                    "tedItemId: number;\r\n\t\t  columns: any[] = [];\r\n\t\t  entityName = \'");
            
            #line 38 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firstCharacterLower));
            
            #line default
            #line hidden
            this.Write("\';\r\n\t\t  detailComponent =");
            
            #line 39 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(detailComponentName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t ");
            
            #line 40 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
foreach (var col in table.Columns.Where(x => x.IsForeignKey && !ApplicationInfo.Instance.skipedColumnInAngularList.Contains(x.Name)))
			{
			var propName = col.Name.FirstCharacterToLower();
            
            #line default
            #line hidden
            this.Write("\t\t\t_");
            
            #line 43 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write(":number;\r\n\t\t\t@Input()\r\n\t\t\tset ");
            
            #line 45 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("(val){\r\n\t\t\t\tif(val!==this._");
            
            #line 46 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("){\r\n\t\t\t\t\tthis._");
            
            #line 47 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("=val;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tget ");
            
            #line 50 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write("(): number {\r\n\t\t\t\t\treturn this._");
            
            #line 51 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t}\r\n\t\t\t");
            
            #line 53 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t  private baseListUrl = \'");
            
            #line 54 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firstCharacterLower));
            
            #line default
            #line hidden
            this.Write("/GetByCustomFilterForList\';\r\n\t\t  constructor() {\r\n\t\t\tsuper();\r\n\t\t\t");
            
            #line 57 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"

			// Iterate all columns

			
			foreach (var col in table.Columns.Where(x => !ApplicationInfo.Instance.skipedColumnInAngularList.Contains(x.Name)))
			{
				if(col.Name=="Code" || col.Name=="AccessLevelId")
				{
					continue;
				}
				var colCaption = col.Name.FirstCharacterToLower();

				// If we can't map it, skip it
				string colNamef;
				if (col.IsForeignKey)
					colNamef = colCaption.Replace("Id", "") + "Title";
				else
					colNamef = col.Name.FirstCharacterToLower();
				string propertyType = SqlToCsharpHelper.GetNetDataType(col.ColType);
				if((propertyType == "string" &&  col.MaxLength=="-1")){
							continue;
					}
				colCaption = string.IsNullOrEmpty(col.ColDesc) ? col.Name : col.ColDesc.Replace("*", "");
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\tthis.columns.push({ \r\n\t\t\t\t\tcaption: \'");
            
            #line 82 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(colCaption));
            
            #line default
            #line hidden
            this.Write("\',\r\n\t\t\t\t\tdataField: \'");
            
            #line 83 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(colNamef));
            
            #line default
            #line hidden
            this.Write("\'\r\n\t\t\t\t\t});\r\n\t\t\t");
            
            #line 85 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"

			} 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\tngOnInit(): void {\r\n\t\t\t\t\tif(this.bindCustomDataSources()){\r\n\t\t\t\t\t" +
                    "\tthis.loadAfterSetFilter=true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\tprivate bindCustomDataSources(" +
                    ") {\r\n\t\t");
            
            #line 96 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"

		var cols=table.Columns.Where(x => x.IsForeignKey && !ApplicationInfo.Instance.skipedColumnInAngularList.Contains(x.Name));
		var colsIfCondition = String.Join(" || ", cols.Select(x=> "this."+ x.Name.FirstCharacterToLower()).ToArray());
		
            
            #line default
            #line hidden
            this.Write("\t\tif (this.listForm) {\r\n\t\t\tlet customListUrl = `${this.baseListUrl}`;\r\n\t\t\t");
            
            #line 102 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
foreach (var col in cols)
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tif(this.");
            
            #line 104 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name.FirstCharacterToLower()));
            
            #line default
            #line hidden
            this.Write("){\r\n\t\t\t\t\tcustomListUrl = += `");
            
            #line 105 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name.FirstCharacterToLower()));
            
            #line default
            #line hidden
            this.Write("=${this.");
            
            #line 105 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name.FirstCharacterToLower()));
            
            #line default
            #line hidden
            this.Write("}&`;\r\n\t\t\t\t}\r\n\t\t\t");
            
            #line 107 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\tthis.listForm.customListUrl = customListUrl;\r\n            this.listForm.refres" +
                    "hList();\r\n\t\t}\r\n\t\tlet res=false;\r\n\t\tif(");
            
            #line 112 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(colsIfCondition));
            
            #line default
            #line hidden
            this.Write("){\r\n\t\t\tres=true;\r\n\t\t}\r\n\t\treturn res;\r\n    }\r\n    afterInitialDetailComponent(comp" +
                    "onentInstance: any) {\r\n        const comp = (<");
            
            #line 118 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(detailComponentName));
            
            #line default
            #line hidden
            this.Write(">componentInstance);\r\n\t\t");
            
            #line 119 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
foreach (var col in cols)
		{	
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t\tif(this.");
            
            #line 121 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name.FirstCharacterToLower()));
            
            #line default
            #line hidden
            this.Write("){\r\n\t\t\t\tcomp.");
            
            #line 122 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name.FirstCharacterToLower()));
            
            #line default
            #line hidden
            this.Write(" = this.");
            
            #line 122 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name.FirstCharacterToLower()));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t");
            
            #line 124 "D:\Works\YashilSPL\CodeGeneratorGreen\CodeGeneratorGreen\Templates\Angular\CRUD\ListForm\AngularListForm.tt"
}
            
            #line default
            #line hidden
            this.Write("        \r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class AngularListFormBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
