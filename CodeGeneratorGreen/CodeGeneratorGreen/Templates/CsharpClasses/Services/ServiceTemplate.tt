<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="CodeGeneratorGreen.Classes" #>
<#@ import namespace="CodeGeneratorGreen.Extentions" #>
<#@ import namespace="CodeGeneratorGreen.Models" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
	<#
	var table = SqlToCsharpHelper.table;
	string repositoryProp = table.Name.FirstCharacterToLower()+"Repository";
	#>
using System.Linq;
using Yashil.Common.Core.Classes;
using Yashil.Common.Core.Interfaces;
using Yashil.Common.Infrastructure.Implementations;
using Yashil.Core.Entities;
using <#=ApplicationInfo.Instance.ClassNamespace#>.Core.Repositories;
using <#=ApplicationInfo.Instance.ClassNamespace#>.Core.Services;

namespace <#= ApplicationInfo.Instance.ServiceNamespace #>
{
	public class <#= table.Name #>Service : GenericService<<#= table.Name #>,int>, I<#= table.Name #>Service
    {
		private readonly IUnitOfWork _unitOfWork;
        private readonly I<#=table.Name#>Repository _<#=repositoryProp#>;
		private readonly IUserPrincipal _userPrincipal;
       
		public <#= table.Name #>Service (IUnitOfWork unitOfWork, I<#=table.Name#>Repository <#=repositoryProp#>, IUserPrincipal userPrincipal)
			: base(unitOfWork, <#=repositoryProp#>,userPrincipal)
        {
			_unitOfWork = unitOfWork;
			_<#=repositoryProp#> = <#=repositoryProp#>;
			_userPrincipal = userPrincipal;
        }
         <#
            var cols=table.Columns.Where(x => x.IsForeignKey);
            var colsParams = String.Join(",", cols.Select(x=> " int? "+ x.Name.FirstCharacterToLower()).ToArray());
            var colVar=String.Join(",", cols.Select(x=> " int? "+ x.Name.FirstCharacterToLower()).ToArray());
    if(!string.IsNullOrEmpty(colsParams)){
        #>
        
        public IQueryable<<#= table.Name #>> GetByCustomFilter(<#=colsParams #>)
        {
            return _<#=repositoryProp#>.GetByCustomFilter(<#=colVar#>);
        }
        <#}#>   

    }
}      
 