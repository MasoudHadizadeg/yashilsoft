<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Classes" #>
<#@ import namespace="CodeGeneratorGreen.Models" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
			<#
			var table = SqlToCsharpHelper.table;
			#>
using System;
using System.ComponentModel.DataAnnotations;
using Yashil.Common.Core.Interfaces;
namespace <#= ApplicationInfo.Instance.ViewModelNamespace #>
{

   public class <#= table.Name #>ListViewModel:IBaseViewModel
    {
		public int ViewModelId
	        {
	            get => Id;
	            set => Id = value;
	        }
<#
			// Keep count so we don't whitespace the last property/column
			int i = 0;
			// Iterate all columns
			foreach (Column col in table.Columns.Where(x => !ApplicationInfo.Instance.skipedColumns.Contains(x.Name)))
			{
				i++;
				string propertyType = SqlToCsharpHelper.GetNetDataType(col.ColType);
				// If we can't map it, skip it
				if (string.IsNullOrWhiteSpace(propertyType) || propertyType == "byte[]" || (propertyType == "string" &&  col.MaxLength=="-1"))
				{
					// Skip
					continue;
				}

				// Handle nullable columns by making the type nullable
				if (col.AllowNull && (propertyType != "string" && propertyType != "byte[]"))
				{
					propertyType += "?";
				}
				string colNamef;
				if (col.IsForeignKey)
					{
						colNamef = col.Name.Replace("Id", "") + "Title";
						propertyType ="string";
					}
				else
					colNamef = col.Name;
				
				if((propertyType == "string" &&  col.MaxLength=="-1")){
							continue;
					}
				#>
        public <#= propertyType #> <#= colNamef #> { get; set; }

<#
			}
#>
    }


	    public class <#= table.Name #>EditModel:IBaseViewModel
        {
	        public int ViewModelId
	            {
	                get => Id;
	                set => Id = value;
	            }
<#
			// Keep count so we don't whitespace the last property/column
			var columnCount = table.Columns.Count;
			i = 0;
			// Iterate all columns
			foreach (Column col in table.Columns.Where(x => !ApplicationInfo.Instance.skipedColumns.Contains(x.Name)))
			{
				i++;
				string propertyType = SqlToCsharpHelper.GetNetDataType(col.ColType);
				// If we can't map it, skip it
				
				if (string.IsNullOrWhiteSpace(propertyType) || (propertyType == "string" &&  col.MaxLength=="-1" && table.GenerateTabForDescColumn))
				{
					// Skip
					continue;
				}
				// Handle nullable columns by making the type nullable
				if (col.AllowNull && (propertyType != "string" && propertyType != "byte[]"))
				{
					propertyType += "?";
				}

				if (propertyType == "int" && col.IsPrimaryKey != "1")
				{
					#>
				[Range(0,int.MaxValue)]<#}if (propertyType == "string" && col.MaxLength!="-1"){#>
				[StringLength(<#=col.MaxLength #>)]<#}if (!col.AllowNull && col.IsPrimaryKey != "1"){#> 
				[Required]
<#}#>
				public <#= propertyType #> <#= col.Name #> { get; set; }		
<#}#>
}

  



public class <#= table.Name #>SimpleViewModel:IBaseViewModel
        {
	        public int ViewModelId
	            {
	                get => Id;
	                set => Id = value;
	            }
<#
			// Keep count so we don't whitespace the last property/column
			columnCount = table.Columns.Count;
			i = 0;
			// Iterate all columns
			bool hasTitleColumn = false;
			foreach (Column col in table.Columns.Where(x =>
				ApplicationInfo.Instance.SimpleViewModelColumns.Contains(x.Name)))
			{
				i++;
				string propertyType = SqlToCsharpHelper.GetNetDataType(col.ColType);
				if (col.Name == "Title")
				{
					hasTitleColumn = true;
				}

				#>
        public <#= propertyType #> <#= col.Name #> { get; set; }

			<#
			}
			
			if (!hasTitleColumn)
			{
				#>
				public string Title { get; set; }
			<#
			} #>
    }

}      
