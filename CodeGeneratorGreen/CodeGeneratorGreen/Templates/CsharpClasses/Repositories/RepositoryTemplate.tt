<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="CodeGeneratorGreen.Classes" #>
<#@ import namespace="CodeGeneratorGreen.Extentions" #>
<#@ import namespace="CodeGeneratorGreen.Models" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
			<#
			var table = SqlToCsharpHelper.table;
            var repName="GenericRepository";
            if(table.IsApplicationBased){
                repName="GenericApplicationBasedRepository";
            }
			#>
using Yashil.Common.Core.Classes;
using Yashil.Common.Infrastructure.Implementations;
using Yashil.Core.Entities;
using Yashil.Infrastructure.Data; 
using <#=ApplicationInfo.Instance.ClassNamespace#>.Core.Repositories;

namespace <#= ApplicationInfo.Instance.RepositoryNamespace #>
{
	public class <#= table.Name #>Repository : <#=repName#><<#= table.Name #>,int>, I<#= table.Name #>Repository
    {
        private readonly YashilAppDbContext _context;
        private readonly IUserPrincipal _userPrincipal;
		public <#= table.Name #>Repository (<#=ApplicationInfo.Instance.DbContextName#> context, IUserPrincipal userPrincipal) : base(context,userPrincipal)
            {
                _context = context;
                _userPrincipal = userPrincipal;
            }
    <#
		foreach (var col in table.Columns.Where(x => !ApplicationInfo.Instance.skipedColumns.Contains(x.Name)))
			{
				 string propertyType = SqlToCsharpHelper.GetNetDataType(col.ColType);
                string colNameFirstCharLower = col.Name.FirstCharacterToLower();
                // If we can't map it, skip it
	            if(propertyType != "string" ||  col.MaxLength!="-1")
                {
                    // Skip
                    continue;
                }
		#>
			  public string Get<#= col.Name #>(int id)
				{
					return DbSet.Where(x => x.Id == id).Select(x => x.<#= col.Name #>).FirstOrDefault();
				}	
<#
			}
	#>	
    }
}      
