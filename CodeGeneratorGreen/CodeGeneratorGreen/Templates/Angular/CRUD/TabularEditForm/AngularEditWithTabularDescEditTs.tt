<#@ template language="C#" #>
<#@ import namespace="Classes" #>
<#@ import namespace="CodeGeneratorGreen.Extentions" #>
<#@ import namespace="System.Linq" #>

<#
    var table = SqlToCsharpHelper.table;
    string angularFriendlyName = table.Name.ToAngularFrendlyName();
    string firstCharacterLower = table.Name.FirstCharacterToLower();
#>


import {Component, OnInit} from '@angular/core';
import {GenericDataService} from '../../../shared/base/services/generic-data.service';
import {Editable} from '../../../shared/base/classes/editable';


@Component({
    selector: 'app-<#=angularFriendlyName#>-detail-tab-based',
    templateUrl: './<#=angularFriendlyName#>-detail-tab-based.component.html'
})
export class <#=table.Name #>DetailTabBasedComponent extends Editable implements OnInit {
    tabs = [
    {id: 1, title: '<#=table.TableDesc #>', template: '<#=firstCharacterLower#>'},
<#
    // Keep count so we don't whitespace the last property/column
    int i = 1;

    // Iterate all columns
    foreach (var col in table.Columns.Where(x => !ApplicationInfo.Instance.skipedColumns.Contains(x.Name)))
    {
        string propertyType = SqlToCsharpHelper.GetNetDataType(col.ColType);
        string colNameFirstCharLower = col.Name.FirstCharacterToLower();
        // If we can't map it, skip it
	    if(propertyType != "string" ||  col.MaxLength!="-1")
        {
            // Skip
            continue;
        }
        i++;
        var colCaption = string.IsNullOrEmpty(col.ColDesc) ? col.Name : col.ColDesc.Replace("*", "");

   
				#>
					 {id: <#=i#>, title: '<#=colCaption #>', template: '<#=colNameFirstCharLower#>'},
				<#
      
    }
#>
 ];

    constructor(private genericDataService: GenericDataService) {
        super();
        this.entityName = '<#=firstCharacterLower#>';
    }

    ngOnInit() {
    }
}


