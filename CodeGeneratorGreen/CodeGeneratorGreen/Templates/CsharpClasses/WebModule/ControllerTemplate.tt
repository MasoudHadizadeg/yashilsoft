<#@ template language="C#" #>
<#@ import namespace="Classes" #>
<#@ import namespace="CodeGeneratorGreen.Extentions" #>
<#@ import namespace="CodeGeneratorGreen.Models" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>


	<#		
            var table = SqlToCsharpHelper.table; 
			string lowerTableName = table.Name.FirstCharacterToLower();
			#> 

using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Data.ResponseModel;
using Microsoft.AspNetCore.Mvc;
using Yashil.Common.Core.Classes;
using AutoMapper;
using Yashil.Common.Web.Infrastructure.BaseClasses;
using Yashil.Core.Entities;
using <#= ApplicationInfo.Instance.ClassNamespace #>.Core.Services;
using  <#= ApplicationInfo.Instance.ClassNamespace #>.Web.Areas.<#= ApplicationInfo.Instance.AreaName #>.ViewModels;

namespace <#= ApplicationInfo.Instance.ControllerNamespace #>
{
	public class <#=table.Name#>Controller : BaseController<<#=table.Name#> ,int,<#=table.Name#>ListViewModel, <#=table.Name#>EditModel,<#=table.Name#>SimpleViewModel>
    {
        private readonly IMapper _mapper;
        private readonly I<#=table.Name#>Service _<#=lowerTableName#>Service;
        public <#=table.Name#>Controller(I<#=table.Name#>Service <#=lowerTableName#>Service, IMapper mapper) : base(<#=lowerTableName#>Service, mapper)
        {
            _mapper=mapper;
            _<#=lowerTableName#>Service=<#=lowerTableName#>Service;
        }
      <#
            var cols=table.Columns.Where(x => x.IsForeignKey);
            var colsParams = String.Join(",", cols.Select(x=> " int? "+ x.Name.FirstCharacterToLower()).ToArray());
            var colVar=String.Join(",", cols.Select(x=> " int? "+ x.Name.FirstCharacterToLower()).ToArray());
    if(!string.IsNullOrEmpty(colsParams)){
        #>
        [HttpGet("GetByCustomFilter")]
        public async Task<LoadResult> GetByCustomFilter(CustomDataSourceLoadOptions loadOptions, <#=colsParams #>)
        {
            var newsStores = _newsStoreService.GetByCustomFilter(<#=colVar #>);
            return await DataSourceLoader.LoadAsync(<#=lowerTableName#>s.ProjectTo<<#=table.Name#>ListViewModel>(_mapper.ConfigurationProvider), loadOptions);
        }
<#}#>  
    }
}      